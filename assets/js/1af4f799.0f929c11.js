"use strict";(self.webpackChunkespresso=self.webpackChunkespresso||[]).push([["7937"],{362:function(s,e,n){n.r(e),n.d(e,{frontMatter:()=>r,toc:()=>d,default:()=>m,metadata:()=>i,assets:()=>o,contentTitle:()=>c});var i=JSON.parse('{"id":"hands-on/epsilon","title":"Dielectric constant","description":"First we perform self consistent field calculation:","source":"@site/docs/hands-on/epsilon.mdx","sourceDirName":"hands-on","slug":"/hands-on/epsilon","permalink":"/espresso/hands-on/epsilon","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/espresso/blob/main/docs/hands-on/epsilon.mdx","tags":[],"version":"current","frontMatter":{"title":"Dielectric constant"},"sidebar":"docs","previous":{"title":"Bi2Se3 (TI)","permalink":"/espresso/hands-on/Bi2Se3"},"next":{"title":"Fermi Surface","permalink":"/espresso/hands-on/fermi-surface"}}'),a=n(5893),t=n(65),l=n(2834);let r={title:"Dielectric constant"},c=void 0,o={},d=[{value:"Resources",id:"resources",level:3}];function h(s){let e={a:"a",admonition:"admonition",annotation:"annotation",code:"code",h3:"h3",li:"li",math:"math",mi:"mi",mn:"mn",mrow:"mrow",msub:"msub",p:"p",pre:"pre",semantics:"semantics",span:"span",ul:"ul",...(0,t.a)(),...s.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:"First we perform self consistent field calculation:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"mpirun -np 4 pw.x -i pw.scf.silicon_epsilon.in > pw.scf.silicon_epsilon.out\n"})}),"\n","\n",(0,a.jsx)(l.Z,{language:"bash",title:"src/silicon/pw.scf.silicon_epsilon.in",showLineNumbers:!0,children:"&CONTROL\n  calculation = 'scf',\n  prefix = 'silicon',\n  outdir = './tmp/'\n  pseudo_dir = '../pseudos/'\n  verbosity = 'high'\n/\n\n&SYSTEM\n  ibrav =  2,\n  celldm(1) = 10.26,\n  nat =  2,\n  ntyp = 1,\n  ecutwfc = 40\n  nbnd = 20\n  nosym = .TRUE.\n  noinv = .TRUE.\n/\n\n&ELECTRONS\n  mixing_beta = 0.6\n  conv_thr = 1.0d-10\n/\n\nATOMIC_SPECIES\n  Si 28.086 Si.pz-vbc.UPF\n\nATOMIC_POSITIONS (alat)\n  Si 0.0 0.0 0.0\n  Si 0.25 0.25 0.25\n\nK_POINTS automatic\n6 6 6 0 0 0\n"}),"\n",(0,a.jsx)(e.p,{children:"Especially, notice following changes:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-fortran",children:"  nbnd = 20\n  nosym = .true.\n  noinv = .true.\n"})}),"\n",(0,a.jsxs)(e.p,{children:["We turn off the automatic reduction of k-points that ",(0,a.jsx)(e.code,{children:"pw.x"})," does by using\ncrystal symmetries (",(0,a.jsx)(e.code,{children:"nosym = .true."})," and ",(0,a.jsx)(e.code,{children:"noinv = .true."}),"). This is because\n",(0,a.jsx)(e.code,{children:"epsilon.x"})," does not recognize crystal symmetries, therefore the entire list of\nk-points in the grid is needed. Secondly, we calculate a larger number of bands\n(20), since we are interested in interband transitions. Also, note that\n",(0,a.jsx)(e.code,{children:"epsilon.x"})," doesn't support the reduction of the k-points grid into the\nirreducible Brillouin zone, so the PW runs must be performed with a uniform\nk-points grid and all k-points weights must be equal to each other, i.e. in the\nk-points card the k-points coordinates must be given manually in ",(0,a.jsx)(e.code,{children:"crystal"})," or\n",(0,a.jsx)(e.code,{children:"alat"})," or ",(0,a.jsx)(e.code,{children:"bohr"}),", but not with the ",(0,a.jsx)(e.code,{children:"automatic"})," option. However, the automatic\nk-points option seems to work. If required, we can perform ",(0,a.jsx)(e.code,{children:"nscf"})," calculation\nwith finer k-grid."]}),"\n",(0,a.jsxs)(e.p,{children:["Next step is to prepare the input file for ",(0,a.jsx)(e.code,{children:"epsilon.x"}),":"]}),"\n","\n",(0,a.jsx)(l.Z,{language:"bash",title:"src/silicon/epsilon.si.in",showLineNumbers:!0,children:'&inputpp\n  outdir = "./tmp/"\n  prefix = "silicon"\n  calculation = "eps"\n/\n\n&energy_grid\n  smeartype = "gauss"\n  intersmear = 0.15\n  intrasmear = 0.0\n  wmin =  0.0\n  wmax = 30.0\n  nw = 1000\n/\n'}),"\n",(0,a.jsxs)(e.p,{children:["The variables ",(0,a.jsx)(e.code,{children:"smeartype"})," and ",(0,a.jsx)(e.code,{children:"intersmear"})," define the numerical approximation\nused to represent the Dirac delta functions in the expression for ",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsx)(e.mrow,{children:(0,a.jsxs)(e.msub,{children:[(0,a.jsx)(e.mi,{children:"\u03F5"}),(0,a.jsx)(e.mn,{children:"2"})]})}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"\\epsilon_2"})]})})}),(0,a.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.5806em",verticalAlign:"-0.15em"}}),(0,a.jsxs)(e.span,{className:"mord",children:[(0,a.jsx)(e.span,{className:"mord mathnormal",children:"\u03F5"}),(0,a.jsx)(e.span,{className:"msupsub",children:(0,a.jsxs)(e.span,{className:"vlist-t vlist-t2",children:[(0,a.jsxs)(e.span,{className:"vlist-r",children:[(0,a.jsx)(e.span,{className:"vlist",style:{height:"0.3011em"},children:(0,a.jsxs)(e.span,{style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,a.jsx)(e.span,{className:"pstrut",style:{height:"2.7em"}}),(0,a.jsx)(e.span,{className:"sizing reset-size6 size3 mtight",children:(0,a.jsx)(e.span,{className:"mord mtight",children:"2"})})]})}),(0,a.jsx)(e.span,{className:"vlist-s",children:"\u200B"})]}),(0,a.jsx)(e.span,{className:"vlist-r",children:(0,a.jsx)(e.span,{className:"vlist",style:{height:"0.15em"},children:(0,a.jsx)(e.span,{})})})]})})]})]})})]}),"\ngiven above. The variables ",(0,a.jsx)(e.code,{children:"wmin"}),", ",(0,a.jsx)(e.code,{children:"wmax"})," and ",(0,a.jsx)(e.code,{children:"nw"})," define the energy grid for\nthe dielectric function. All the energy variables are in eV."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"mpirun -np 4 epsilon.x -i epsilon.si.in > epsilon.si.out\n"})}),"\n",(0,a.jsxs)(e.p,{children:["We will see the results are saved in separate ",(0,a.jsx)(e.code,{children:".dat"})," files. We can plot the real\n(",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsx)(e.mrow,{children:(0,a.jsxs)(e.msub,{children:[(0,a.jsx)(e.mi,{children:"\u03F5"}),(0,a.jsx)(e.mn,{children:"1"})]})}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"\\epsilon_1"})]})})}),(0,a.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.5806em",verticalAlign:"-0.15em"}}),(0,a.jsxs)(e.span,{className:"mord",children:[(0,a.jsx)(e.span,{className:"mord mathnormal",children:"\u03F5"}),(0,a.jsx)(e.span,{className:"msupsub",children:(0,a.jsxs)(e.span,{className:"vlist-t vlist-t2",children:[(0,a.jsxs)(e.span,{className:"vlist-r",children:[(0,a.jsx)(e.span,{className:"vlist",style:{height:"0.3011em"},children:(0,a.jsxs)(e.span,{style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,a.jsx)(e.span,{className:"pstrut",style:{height:"2.7em"}}),(0,a.jsx)(e.span,{className:"sizing reset-size6 size3 mtight",children:(0,a.jsx)(e.span,{className:"mord mtight",children:"1"})})]})}),(0,a.jsx)(e.span,{className:"vlist-s",children:"\u200B"})]}),(0,a.jsx)(e.span,{className:"vlist-r",children:(0,a.jsx)(e.span,{className:"vlist",style:{height:"0.15em"},children:(0,a.jsx)(e.span,{})})})]})})]})]})})]}),") and imaginary (",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsx)(e.mrow,{children:(0,a.jsxs)(e.msub,{children:[(0,a.jsx)(e.mi,{children:"\u03F5"}),(0,a.jsx)(e.mn,{children:"2"})]})}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"\\epsilon_2"})]})})}),(0,a.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.5806em",verticalAlign:"-0.15em"}}),(0,a.jsxs)(e.span,{className:"mord",children:[(0,a.jsx)(e.span,{className:"mord mathnormal",children:"\u03F5"}),(0,a.jsx)(e.span,{className:"msupsub",children:(0,a.jsxs)(e.span,{className:"vlist-t vlist-t2",children:[(0,a.jsxs)(e.span,{className:"vlist-r",children:[(0,a.jsx)(e.span,{className:"vlist",style:{height:"0.3011em"},children:(0,a.jsxs)(e.span,{style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,a.jsx)(e.span,{className:"pstrut",style:{height:"2.7em"}}),(0,a.jsx)(e.span,{className:"sizing reset-size6 size3 mtight",children:(0,a.jsx)(e.span,{className:"mord mtight",children:"2"})})]})}),(0,a.jsx)(e.span,{className:"vlist-s",children:"\u200B"})]}),(0,a.jsx)(e.span,{className:"vlist-r",children:(0,a.jsx)(e.span,{className:"vlist",style:{height:"0.15em"},children:(0,a.jsx)(e.span,{})})})]})})]})]})})]}),") parts of dielectric constants:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-py",children:'import matplotlib.pyplot as plt\nfrom matplotlib import rcParamsDefault\nimport numpy as np\n%matplotlib inline\nplt.rcParams["figure.dpi"]=150\nplt.rcParams["figure.facecolor"]="white"\n\ndata_r = np.loadtxt(\'../src/silicon/epsr_silicon.dat\')\ndata_i = np.loadtxt(\'../src/silicon/epsi_silicon.dat\')\nenergy_r, epsilon_r = data_r[:, 0], data_r[:, 2]\nenergy_i, epsilon_i = data_i[:, 0], data_i[:, 2]\n\nplt.plot(energy_r, epsilon_r, lw=1, label="$\\\\epsilon_1$")\nplt.plot(energy_i, epsilon_i, lw=1, label="$\\\\epsilon_2$")\nplt.xlim(0, 15)\nplt.xlabel("Energy (eV)")\nplt.ylabel("$\\\\epsilon_1~/~\\\\epsilon_2$")\nplt.legend(frameon=False)\nplt.show()\n'})}),"\n",(0,a.jsx)("img",{src:n(7983).Z,class:"inv-hue-rot-180",alt:"silicon-epsilon"}),"\n",(0,a.jsx)(e.admonition,{type:"warning",children:(0,a.jsxs)(e.p,{children:["Ultra-soft pseudopotentials do not work with ",(0,a.jsx)(e.code,{children:"epsilon.x"}),". Also note that the\nabove example is not tested against the k-mesh. We usually need finer k-mesh for\n",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsx)(e.mrow,{children:(0,a.jsx)(e.mi,{children:"\u03F5"})}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"\\epsilon"})]})})}),(0,a.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.4306em"}}),(0,a.jsx)(e.span,{className:"mord mathnormal",children:"\u03F5"})]})})]})," to converge. By default the maximum number of k-points is set to\n40000 in Quantum Espresso, if we need more k-points, we can change\n",(0,a.jsx)(e.a,{href:"https://gitlab.com/QEF/q-e/-/blob/develop/Modules/parameters.f90",children:"Modules/parameters.f90"}),"\nand recompile Quantum Espresso."]})}),"\n",(0,a.jsx)(e.h3,{id:"resources",children:"Resources"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)("a",{target:"_blank",href:n(8504).Z,children:"Epsilon.x manual"}),"\n"]}),"\n"]})]})}function m(s={}){let{wrapper:e}={...(0,t.a)(),...s.components};return e?(0,a.jsx)(e,{...s,children:(0,a.jsx)(h,{...s})}):h(s)}},8504:function(s,e,n){n.d(e,{Z:()=>i});let i=n.p+"assets/files/eps_man-ab3fac19eb366509dd129c37fbf94ac0.pdf"},7983:function(s,e,n){n.d(e,{Z:()=>i});let i=n.p+"assets/images/silicon-epsilon-83924adfcef99d6186800decced9800e.webp"}}]);